MVC 패턴은 지금까지 학습한 것 처럼 하나의 서블릿이나,
JSP로 처리하던 것을 컨트롤러(Controller)와 뷰(View)라는 영역으로 서로 역할을 나눈 것을 말한다.
웹 애플리케이션은 보통 이 MVC 패턴을 사용한다

컨트롤러(Controller): HTTP 요청을 받아서 파라미터를 검증하고, 비즈니스 로직을 실행한다. 그리고 뷰에 전달할 결과 데이터를 조회해서 모델에 담는다. (기존의 Servlet)
모델(Model): 뷰에 출력할 데이터를 담아둔다. 뷰가 필요한 데이터를 모두 모델에 담아서 전달(참조)해주는 덕분에 뷰는 비즈니스 로직이나 데이터 접근을 몰라도 되고, 화면을 렌더링 하는 일에 집중할 수 있다.
뷰(View): 모델에 담겨있는 데이터를 사용(참조)해서 화면을 그리는 일에 집중한다. 여기서는 HTML을 생성하는 부분을 말한다. (기존의 JSP 역할)

**
컨트롤러에 비즈니스 로직을 둘 수 있지만 컨트롤러의 역할이 많아지므로 비즈니스 로직은 서비스 계층에서 담당한다
(컨트롤러는 이름 그대로 무언가를 중간에서 조종하는 것 이다)
컨트롤러는 파라미터 검증, 비즈니스 호출, 결과를 뷰, 모델에 담아 어떤 뷰를 사용할지 선택 등 역할을 한다

최종적으로
Controller: 컨트롤러 로직, 클라이언트가 컨트롤러를 호출(요청)함
Service, Repository: 비즈니스 로직, 데이터 접근 역할, 컨트롤러가 이들을 호출함
이후 반환된 데이터를 컨트롤러가 Model 에 데이터를 전달하고, View 에 할당하여
View: 뷰 로직을 실행할때 필요한 데이터를 Model 에서 참조한다 이후 클라이언트에게 반환(응답)함